// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`IssuesTableTest automated checks disabled 1`] = `
<div
  className="issues-table"
>
  <h1>
    test title
  </h1>
  <div
    className="issues-table-content"
  >
    <React.Fragment>
      <div
        className="details-view-command-bar"
      >
        <VisualizationToggle
          checked={false}
          className="automated-checks-details-view-toggle"
          disabled={false}
          label="Show failures"
          onClick={[Function]}
          visualizationName="Automated checks"
        />
      </div>
      <div
        className="details-disabled-message"
        role="alert"
      >
        Turn on 
        <Term>
          Automated checks
        </Term>
         to see a list of failures.
      </div>
    </React.Fragment>
  </div>
</div>
`;

exports[`IssuesTableTest includes subtitle if specified 1`] = `
"<div className=\\"issues-table\\">
  <h1>
    test title
  </h1>
  <div className=\\"issues-table-subtitle\\">
    test subtitle text
  </div>
  <ScanningSpinner isSpinning={true} label=\\"Loading...\\" />
</div>"
`;

exports[`IssuesTableTest spinner for scanning state 1`] = `
"<div className=\\"issues-table\\">
  <h1>
    test title
  </h1>
  <div className=\\"issues-table-content\\">
    <ScanningSpinner isSpinning={true} label=\\"Scanning...\\" />
  </div>
</div>"
`;

exports[`IssuesTableTest spinner, issuesEnabled == null 1`] = `
"<div className=\\"issues-table\\">
  <h1>
    test title
  </h1>
  <ScanningSpinner isSpinning={true} label=\\"Loading...\\" />
</div>"
`;

exports[`IssuesTableTest spinner, issuesEnabled is an empty object 1`] = `
"<div className=\\"issues-table\\">
  <h1>
    test title
  </h1>
  <div className=\\"issues-table-content\\">
    <ScanningSpinner isSpinning={true} label=\\"Loading data...\\" />
  </div>
</div>"
`;

exports[`IssuesTableTest table with 0 issues 1`] = `
<div
  className="issues-table"
>
  <h1>
    test title
  </h1>
  <div
    className="issues-table-content"
  >
    <FlaggedComponent
      disableJSXElement={
        <React.Fragment>
          <div
            className="details-view-command-bar"
          >
            <VisualizationToggle
              checked={true}
              className="automated-checks-details-view-toggle"
              disabled={false}
              label="Show failures"
              onClick={[Function]}
              visualizationName="Automated checks"
            />
            <ReportExportComponent
              deps={
                Object {
                  "getDateFromTimestamp": [Function],
                  "reportGenerator": proxy {
                    "___id": "BCDF5CE5-F0DF-40B7-8BA0-69DF395033C8",
                    "assessmentReportHtmlGenerator": undefined,
                    "reportHtmlGenerator": undefined,
                    "reportNameGenerator": undefined,
                  },
                }
              }
              exportResultsType="AutomatedChecks"
              getExportDescription={[Function]}
              htmlGenerator={[Function]}
              pageTitle="pageTitle"
              reportGenerator={
                proxy {
                  "___id": "BCDF5CE5-F0DF-40B7-8BA0-69DF395033C8",
                  "assessmentReportHtmlGenerator": undefined,
                  "reportHtmlGenerator": undefined,
                  "reportNameGenerator": undefined,
                }
              }
              scanDate={Date { NaN }}
              updatePersistedDescription={[Function]}
            />
          </div>
          <div
            className="issues-table-details"
          >
            <IssuesDetailsList
              issuesSelection={
                proxy {
                  "___id": "BCDF5CE5-F0DF-40B7-8BA0-69DF395033C8",
                  "_anchoredIndex": 0,
                  "_canSelectItem": [Function],
                  "_change": [Function],
                  "_changeEventSuppressionCount": 0,
                  "_exemptedCount": 0,
                  "_exemptedIndices": Object {},
                  "_getKey": [Function],
                  "_isModal": false,
                  "_items": Array [],
                  "_keyToIndexMap": Object {},
                  "_onSelectionChanged": undefined,
                  "_selectedItems": null,
                  "_setAllSelected": [Function],
                  "_unselectableCount": 0,
                  "_unselectableIndices": Object {},
                  "_updateCount": [Function],
                  "canSelectItem": [Function],
                  "count": 0,
                  "getItems": [Function],
                  "getKey": [Function],
                  "getSelectedCount": [Function],
                  "getSelectedIndices": [Function],
                  "getSelection": [Function],
                  "isAllSelected": [Function],
                  "isIndexSelected": [Function],
                  "isKeySelected": [Function],
                  "isModal": [Function],
                  "isRangeSelected": [Function],
                  "mode": 2,
                  "selectToIndex": [Function],
                  "selectToKey": [Function],
                  "setAllSelected": [Function],
                  "setChangeEvents": [Function],
                  "setIndexSelected": [Function],
                  "setItems": [Function],
                  "setKeySelected": [Function],
                  "setModal": [Function],
                  "toggleAllSelected": [Function],
                  "toggleIndexSelected": [Function],
                  "toggleKeySelected": [Function],
                  "toggleRangeSelected": [Function],
                }
              }
              issuesTableHandler={
                proxy {
                  "___id": "BCDF5CE5-F0DF-40B7-8BA0-69DF395033C8",
                }
              }
              violations={Array []}
            />
            <div
              className="issue-detail-outer-container ms-Fabric"
            >
              <IssuesDetailsPane
                deps={
                  Object {
                    "getDateFromTimestamp": [Function],
                    "reportGenerator": proxy {
                      "___id": "BCDF5CE5-F0DF-40B7-8BA0-69DF395033C8",
                      "assessmentReportHtmlGenerator": undefined,
                      "reportHtmlGenerator": undefined,
                      "reportNameGenerator": undefined,
                    },
                  }
                }
                featureFlagData={Object {}}
                pageTitle="pageTitle"
                pageUrl="http://pageUrl"
                selectedIdToRuleResultMap={Object {}}
                userConfigurationStoreData={
                  Object {
                    "bugService": "gitHub",
                  }
                }
              />
            </div>
          </div>
        </React.Fragment>
      }
      enableJSXElement={
        <CardsView
          cardsViewData={
            Object {
              "allCardsCollapsed": true,
              "cards": Object {
                "fail": Array [
                  Object {
                    "description": "sample-description",
                    "guidance": Array [
                      Object {
                        "href": "sample-guidance-href",
                        "text": "sample-guidance-text",
                      },
                    ],
                    "id": "some-rule",
                    "nodes": Array [
                      Object {
                        "descriptors": Object {
                          "snippet": "this is a sample snippet",
                        },
                        "identifiers": Object {
                          "conciseName": "body img",
                          "css-selector": "body img",
                          "identifier": "body img",
                        },
                        "resolution": Object {
                          "how-to-fix-web": Object {
                            "all": Array [],
                            "any": Array [
                              "Element does not have an alt attribute",
                              "aria-label attribute does not exist or is empty",
                              "aria-labelledby attribute does not exist, references elements that do not exist or references elements that are empty",
                            ],
                            "none": Array [],
                          },
                          "howToFixSummary": "sample how to fix summary",
                        },
                        "ruleId": "image-alt",
                        "status": "fail",
                        "uid": "some-guid-here",
                      },
                    ],
                    "url": "sample-url",
                  },
                ],
                "inapplicable": Array [],
                "pass": Array [],
                "unknown": Array [],
              },
              "visualHelperEnabled": true,
            }
          }
          deps={
            Object {
              "getDateFromTimestamp": [Function],
              "reportGenerator": proxy {
                "___id": "BCDF5CE5-F0DF-40B7-8BA0-69DF395033C8",
                "assessmentReportHtmlGenerator": undefined,
                "reportHtmlGenerator": undefined,
                "reportNameGenerator": undefined,
              },
            }
          }
          targetAppInfo={
            Object {
              "name": "app",
            }
          }
          userConfigurationStoreData={
            Object {
              "bugService": "gitHub",
            }
          }
        />
      }
      featureFlag="universalCardsUI"
      featureFlagStoreData={Object {}}
    />
  </div>
</div>
`;

exports[`IssuesTableTest table with 1 issues 1`] = `
<div
  className="issues-table"
>
  <h1>
    test title
  </h1>
  <div
    className="issues-table-content"
  >
    <FlaggedComponent
      disableJSXElement={
        <React.Fragment>
          <div
            className="details-view-command-bar"
          >
            <VisualizationToggle
              checked={true}
              className="automated-checks-details-view-toggle"
              disabled={false}
              label="Show failures"
              onClick={[Function]}
              visualizationName="Automated checks"
            />
            <ReportExportComponent
              deps={
                Object {
                  "getDateFromTimestamp": [Function],
                  "reportGenerator": proxy {
                    "___id": "BCDF5CE5-F0DF-40B7-8BA0-69DF395033C8",
                    "assessmentReportHtmlGenerator": undefined,
                    "reportHtmlGenerator": undefined,
                    "reportNameGenerator": undefined,
                  },
                }
              }
              exportResultsType="AutomatedChecks"
              getExportDescription={[Function]}
              htmlGenerator={[Function]}
              pageTitle="pageTitle"
              reportGenerator={
                proxy {
                  "___id": "BCDF5CE5-F0DF-40B7-8BA0-69DF395033C8",
                  "assessmentReportHtmlGenerator": undefined,
                  "reportHtmlGenerator": undefined,
                  "reportNameGenerator": undefined,
                }
              }
              scanDate={Date { NaN }}
              updatePersistedDescription={[Function]}
            />
          </div>
          <div
            className="issues-table-details"
          >
            <IssuesDetailsList
              issuesSelection={
                proxy {
                  "___id": "BCDF5CE5-F0DF-40B7-8BA0-69DF395033C8",
                  "_anchoredIndex": 0,
                  "_canSelectItem": [Function],
                  "_change": [Function],
                  "_changeEventSuppressionCount": 0,
                  "_exemptedCount": 0,
                  "_exemptedIndices": Object {},
                  "_getKey": [Function],
                  "_isModal": false,
                  "_items": Array [],
                  "_keyToIndexMap": Object {},
                  "_onSelectionChanged": undefined,
                  "_selectedItems": null,
                  "_setAllSelected": [Function],
                  "_unselectableCount": 0,
                  "_unselectableIndices": Object {},
                  "_updateCount": [Function],
                  "canSelectItem": [Function],
                  "count": 0,
                  "getItems": [Function],
                  "getKey": [Function],
                  "getSelectedCount": [Function],
                  "getSelectedIndices": [Function],
                  "getSelection": [Function],
                  "isAllSelected": [Function],
                  "isIndexSelected": [Function],
                  "isKeySelected": [Function],
                  "isModal": [Function],
                  "isRangeSelected": [Function],
                  "mode": 2,
                  "selectToIndex": [Function],
                  "selectToKey": [Function],
                  "setAllSelected": [Function],
                  "setChangeEvents": [Function],
                  "setIndexSelected": [Function],
                  "setItems": [Function],
                  "setKeySelected": [Function],
                  "setModal": [Function],
                  "toggleAllSelected": [Function],
                  "toggleIndexSelected": [Function],
                  "toggleKeySelected": [Function],
                  "toggleRangeSelected": [Function],
                }
              }
              issuesTableHandler={
                proxy {
                  "___id": "BCDF5CE5-F0DF-40B7-8BA0-69DF395033C8",
                }
              }
              violations={
                Array [
                  Object {
                    "description": "rule description",
                    "help": "rule help",
                    "id": "rule name",
                    "nodes": Array [
                      Object {
                        "all": Array [],
                        "any": Array [],
                        "html": "",
                        "none": Array [],
                        "target": Array [
                          "#target-1",
                        ],
                      },
                    ],
                  },
                ]
              }
            />
            <div
              className="issue-detail-outer-container ms-Fabric"
            >
              <IssuesDetailsPane
                deps={
                  Object {
                    "getDateFromTimestamp": [Function],
                    "reportGenerator": proxy {
                      "___id": "BCDF5CE5-F0DF-40B7-8BA0-69DF395033C8",
                      "assessmentReportHtmlGenerator": undefined,
                      "reportHtmlGenerator": undefined,
                      "reportNameGenerator": undefined,
                    },
                  }
                }
                featureFlagData={Object {}}
                pageTitle="pageTitle"
                pageUrl="http://pageUrl"
                selectedIdToRuleResultMap={Object {}}
                userConfigurationStoreData={
                  Object {
                    "bugService": "gitHub",
                  }
                }
              />
            </div>
          </div>
        </React.Fragment>
      }
      enableJSXElement={
        <CardsView
          cardsViewData={
            Object {
              "allCardsCollapsed": true,
              "cards": Object {
                "fail": Array [
                  Object {
                    "description": "sample-description",
                    "guidance": Array [
                      Object {
                        "href": "sample-guidance-href",
                        "text": "sample-guidance-text",
                      },
                    ],
                    "id": "some-rule",
                    "nodes": Array [
                      Object {
                        "descriptors": Object {
                          "snippet": "this is a sample snippet",
                        },
                        "identifiers": Object {
                          "conciseName": "body img",
                          "css-selector": "body img",
                          "identifier": "body img",
                        },
                        "resolution": Object {
                          "how-to-fix-web": Object {
                            "all": Array [],
                            "any": Array [
                              "Element does not have an alt attribute",
                              "aria-label attribute does not exist or is empty",
                              "aria-labelledby attribute does not exist, references elements that do not exist or references elements that are empty",
                            ],
                            "none": Array [],
                          },
                          "howToFixSummary": "sample how to fix summary",
                        },
                        "ruleId": "image-alt",
                        "status": "fail",
                        "uid": "some-guid-here",
                      },
                    ],
                    "url": "sample-url",
                  },
                ],
                "inapplicable": Array [],
                "pass": Array [],
                "unknown": Array [],
              },
              "visualHelperEnabled": true,
            }
          }
          deps={
            Object {
              "getDateFromTimestamp": [Function],
              "reportGenerator": proxy {
                "___id": "BCDF5CE5-F0DF-40B7-8BA0-69DF395033C8",
                "assessmentReportHtmlGenerator": undefined,
                "reportHtmlGenerator": undefined,
                "reportNameGenerator": undefined,
              },
            }
          }
          targetAppInfo={
            Object {
              "name": "app",
            }
          }
          userConfigurationStoreData={
            Object {
              "bugService": "gitHub",
            }
          }
        />
      }
      featureFlag="universalCardsUI"
      featureFlagStoreData={Object {}}
    />
  </div>
</div>
`;

exports[`IssuesTableTest table with 2 issues 1`] = `
<div
  className="issues-table"
>
  <h1>
    test title
  </h1>
  <div
    className="issues-table-content"
  >
    <FlaggedComponent
      disableJSXElement={
        <React.Fragment>
          <div
            className="details-view-command-bar"
          >
            <VisualizationToggle
              checked={true}
              className="automated-checks-details-view-toggle"
              disabled={false}
              label="Show failures"
              onClick={[Function]}
              visualizationName="Automated checks"
            />
            <ReportExportComponent
              deps={
                Object {
                  "getDateFromTimestamp": [Function],
                  "reportGenerator": proxy {
                    "___id": "BCDF5CE5-F0DF-40B7-8BA0-69DF395033C8",
                    "assessmentReportHtmlGenerator": undefined,
                    "reportHtmlGenerator": undefined,
                    "reportNameGenerator": undefined,
                  },
                }
              }
              exportResultsType="AutomatedChecks"
              getExportDescription={[Function]}
              htmlGenerator={[Function]}
              pageTitle="pageTitle"
              reportGenerator={
                proxy {
                  "___id": "BCDF5CE5-F0DF-40B7-8BA0-69DF395033C8",
                  "assessmentReportHtmlGenerator": undefined,
                  "reportHtmlGenerator": undefined,
                  "reportNameGenerator": undefined,
                }
              }
              scanDate={Date { NaN }}
              updatePersistedDescription={[Function]}
            />
          </div>
          <div
            className="issues-table-details"
          >
            <IssuesDetailsList
              issuesSelection={
                proxy {
                  "___id": "BCDF5CE5-F0DF-40B7-8BA0-69DF395033C8",
                  "_anchoredIndex": 0,
                  "_canSelectItem": [Function],
                  "_change": [Function],
                  "_changeEventSuppressionCount": 0,
                  "_exemptedCount": 0,
                  "_exemptedIndices": Object {},
                  "_getKey": [Function],
                  "_isModal": false,
                  "_items": Array [],
                  "_keyToIndexMap": Object {},
                  "_onSelectionChanged": undefined,
                  "_selectedItems": null,
                  "_setAllSelected": [Function],
                  "_unselectableCount": 0,
                  "_unselectableIndices": Object {},
                  "_updateCount": [Function],
                  "canSelectItem": [Function],
                  "count": 0,
                  "getItems": [Function],
                  "getKey": [Function],
                  "getSelectedCount": [Function],
                  "getSelectedIndices": [Function],
                  "getSelection": [Function],
                  "isAllSelected": [Function],
                  "isIndexSelected": [Function],
                  "isKeySelected": [Function],
                  "isModal": [Function],
                  "isRangeSelected": [Function],
                  "mode": 2,
                  "selectToIndex": [Function],
                  "selectToKey": [Function],
                  "setAllSelected": [Function],
                  "setChangeEvents": [Function],
                  "setIndexSelected": [Function],
                  "setItems": [Function],
                  "setKeySelected": [Function],
                  "setModal": [Function],
                  "toggleAllSelected": [Function],
                  "toggleIndexSelected": [Function],
                  "toggleKeySelected": [Function],
                  "toggleRangeSelected": [Function],
                }
              }
              issuesTableHandler={
                proxy {
                  "___id": "BCDF5CE5-F0DF-40B7-8BA0-69DF395033C8",
                }
              }
              violations={
                Array [
                  Object {
                    "description": "rule description",
                    "help": "rule help",
                    "id": "rule name",
                    "nodes": Array [
                      Object {
                        "all": Array [],
                        "any": Array [],
                        "html": "",
                        "none": Array [],
                        "target": Array [
                          "#target-1",
                        ],
                      },
                      Object {
                        "all": Array [],
                        "any": Array [],
                        "html": "",
                        "none": Array [],
                        "target": Array [
                          "#target-2",
                        ],
                      },
                    ],
                  },
                ]
              }
            />
            <div
              className="issue-detail-outer-container ms-Fabric"
            >
              <IssuesDetailsPane
                deps={
                  Object {
                    "getDateFromTimestamp": [Function],
                    "reportGenerator": proxy {
                      "___id": "BCDF5CE5-F0DF-40B7-8BA0-69DF395033C8",
                      "assessmentReportHtmlGenerator": undefined,
                      "reportHtmlGenerator": undefined,
                      "reportNameGenerator": undefined,
                    },
                  }
                }
                featureFlagData={Object {}}
                pageTitle="pageTitle"
                pageUrl="http://pageUrl"
                selectedIdToRuleResultMap={Object {}}
                userConfigurationStoreData={
                  Object {
                    "bugService": "gitHub",
                  }
                }
              />
            </div>
          </div>
        </React.Fragment>
      }
      enableJSXElement={
        <CardsView
          cardsViewData={
            Object {
              "allCardsCollapsed": true,
              "cards": Object {
                "fail": Array [
                  Object {
                    "description": "sample-description",
                    "guidance": Array [
                      Object {
                        "href": "sample-guidance-href",
                        "text": "sample-guidance-text",
                      },
                    ],
                    "id": "some-rule",
                    "nodes": Array [
                      Object {
                        "descriptors": Object {
                          "snippet": "this is a sample snippet",
                        },
                        "identifiers": Object {
                          "conciseName": "body img",
                          "css-selector": "body img",
                          "identifier": "body img",
                        },
                        "resolution": Object {
                          "how-to-fix-web": Object {
                            "all": Array [],
                            "any": Array [
                              "Element does not have an alt attribute",
                              "aria-label attribute does not exist or is empty",
                              "aria-labelledby attribute does not exist, references elements that do not exist or references elements that are empty",
                            ],
                            "none": Array [],
                          },
                          "howToFixSummary": "sample how to fix summary",
                        },
                        "ruleId": "image-alt",
                        "status": "fail",
                        "uid": "some-guid-here",
                      },
                    ],
                    "url": "sample-url",
                  },
                ],
                "inapplicable": Array [],
                "pass": Array [],
                "unknown": Array [],
              },
              "visualHelperEnabled": true,
            }
          }
          deps={
            Object {
              "getDateFromTimestamp": [Function],
              "reportGenerator": proxy {
                "___id": "BCDF5CE5-F0DF-40B7-8BA0-69DF395033C8",
                "assessmentReportHtmlGenerator": undefined,
                "reportHtmlGenerator": undefined,
                "reportNameGenerator": undefined,
              },
            }
          }
          targetAppInfo={
            Object {
              "name": "app",
            }
          }
          userConfigurationStoreData={
            Object {
              "bugService": "gitHub",
            }
          }
        />
      }
      featureFlag="universalCardsUI"
      featureFlagStoreData={Object {}}
    />
  </div>
</div>
`;
