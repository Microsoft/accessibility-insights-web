// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`IssuesDetailsListTest render columns 1`] = `
<div
  className="issues-details-list"
>
  <FailureDetails
    items={
      Array [
        Object {
          "selector": "testSelector",
        },
        Object {
          "selector": "testSelector",
        },
      ]
    }
  />
  <StyledWithViewportComponent
    ariaLabelForSelectAllCheckbox="Toggle selection for all items"
    ariaLabelForSelectionColumn="Toggle selection"
    className="details-list"
    columns={
      Array [
        Object {
          "ariaLabel": "Path",
          "className": "content-cell",
          "fieldName": "selector",
          "headerClassName": "content-header",
          "isResizable": true,
          "key": "target",
          "maxWidth": 200,
          "minWidth": 100,
          "name": "Path",
        },
        Object {
          "ariaLabel": "Snippet",
          "className": "content-cell insights-code",
          "fieldName": "html",
          "isResizable": true,
          "key": "html",
          "maxWidth": 400,
          "minWidth": 200,
          "name": "Snippet",
        },
        Object {
          "ariaLabel": "How to fix",
          "className": "content-cell",
          "fieldName": "failureSummary",
          "isResizable": true,
          "key": "fix",
          "maxWidth": 400,
          "minWidth": 200,
          "name": "How to fix",
        },
      ]
    }
    constrainMode={0}
    groupProps={
      Object {
        "isAllGroupsCollapsed": true,
        "onRenderHeader": [Function],
      }
    }
    groups={
      Array [
        Object {
          "count": 2,
          "guidanceLinks": Array [
            Object {
              "href": "url",
              "text": "test text",
            },
          ],
          "key": "rule name",
          "name": "rule help",
          "ruleUrl": "url",
          "startIndex": 0,
        },
      ]
    }
    items={
      Array [
        Object {
          "selector": "testSelector",
        },
        Object {
          "selector": "testSelector",
        },
      ]
    }
    layoutMode={0}
    selection={
      proxy {
        "___id": "BCDF5CE5-F0DF-40B7-8BA0-69DF395033C8",
        "_anchoredIndex": 0,
        "_canSelectItem": [Function],
        "_change": [Function],
        "_changeEventSuppressionCount": 0,
        "_exemptedCount": 0,
        "_exemptedIndices": Object {},
        "_getKey": [Function],
        "_isModal": false,
        "_items": Array [],
        "_keyToIndexMap": Object {},
        "_onSelectionChanged": undefined,
        "_selectedItems": null,
        "_unselectableCount": 0,
        "_unselectableIndices": Object {},
        "_updateCount": [Function],
        "canSelectItem": [Function],
        "getItems": [Function],
        "getKey": [Function],
        "getSelectedCount": [Function],
        "getSelectedIndices": [Function],
        "getSelection": [Function],
        "isAllSelected": [Function],
        "isIndexSelected": [Function],
        "isKeySelected": [Function],
        "isModal": [Function],
        "isRangeSelected": [Function],
        "mode": 2,
        "selectToIndex": [Function],
        "selectToKey": [Function],
        "setAllSelected": [Function],
        "setChangeEvents": [Function],
        "setIndexSelected": [Function],
        "setItems": [Function],
        "setKeySelected": [Function],
        "setModal": [Function],
        "toggleAllSelected": [Function],
        "toggleIndexSelected": [Function],
        "toggleKeySelected": [Function],
        "toggleRangeSelected": [Function],
      }
    }
    selectionMode={2}
    selectionPreservedOnEmptyClick={true}
    setKey="key"
  />
</div>
`;
