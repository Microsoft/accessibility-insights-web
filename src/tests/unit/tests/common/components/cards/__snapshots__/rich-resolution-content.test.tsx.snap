// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`RichResolutionContent renders android/TouchSizeWcag using contentVariables 1`] = `
<span>
  The element has an insufficient target size (width: 
  LOGICAL_WIDTH_VALUE
  dp, height: 
  LOGICAL_HEIGHT_VALUE
  dp). Set the element's
   
  <Code>
    minWidth
  </Code>
   and 
  <Code>
    minHeight
  </Code>
   
  attributes to at least 44dp.
</span>
`;

exports[`RichResolutionContent renders static content with id=android/ActiveViewName 1`] = `
<span>
  The view is active but has no name available to assistive technologies. Provide a name for the view using its
   
  <Code>
    contentDescription
  </Code>
  ,
   
  <Code>
    hint
  </Code>
  , 
  <Code>
    labelFor
  </Code>
  , or
   
  <Code>
    text
  </Code>
   attribute (depending on the view type)
</span>
`;

exports[`RichResolutionContent renders static content with id=android/ColorContrast 1`] = `
<div
  className="combinationLists"
>
  <ul
    className="multiLineTextYesBullet"
  >
    <li
      list-style-type="disc"
    >
      If the text is intended to be invisible, it passes.
    </li>
    <li
      list-style-type="disc"
    >
      If the text is intended to be visible, use
       
      <stubLinkComponent
        href="https://go.microsoft.com/fwlink/?linkid=2075365"
      >
        Accessibility Insights for Windows
      </stubLinkComponent>
       
      (or the
       
      <stubLinkComponent
        href="https://developer.paciellogroup.com/resources/contrastanalyser/"
      >
        Colour Contrast Analyser
      </stubLinkComponent>
       
      if you're testing on a Mac) to manually verify that it has sufficient contrast compared to the background. If the background is an image or gradient, test an area where contrast appears to be lowest.
    </li>
  </ul>
</div>
`;

exports[`RichResolutionContent renders static content with id=android/EditTextValue 1`] = `
<span>
  The element's 
  <Code>
    contentDescription
  </Code>
   overrides the text value required by assistive technologies. Remove the element's
   
  <Code>
    contentDescription
  </Code>
   attribute.
</span>
`;

exports[`RichResolutionContent renders static content with id=android/ImageViewName 1`] = `
<span>
  The image has no alternate text and is not identified as decorative. If the image conveys meaningful content, provide alternate text using the
   
  <Code>
    contentDescription
  </Code>
   attribute. If the image is decorative, give it an empty 
  <Code>
    contentDescription
  </Code>
  , or set its 
  <Code>
    isImportantForAccessibility
  </Code>
   attribute to false.
</span>
`;

exports[`RichResolutionContent renders static content with id=android/atfa/ClassNameCheck 1`] = `
<span>
  Provide a 
  <Code>
    className
  </Code>
   value within the element's
   
  <stubLinkComponent
    href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html"
  >
    AccessibilityNodeInfo
  </stubLinkComponent>
   
  that:
  <ol>
    <li>
      Closely describes the element's function,
    </li>
    <li>
      Matches a class that extends android.view.View,
    </li>
    <li>
      Is provided with the Android SDK or support libraries, and
    </li>
    <li>
      Is as far down Android's class hierarchy as possible.
    </li>
  </ol>
  Note: Do not attempt to fix this issue by adding the class name to the object's ContentDescription, as that approach can cause some assistive technologies to announce the class twice.
</span>
`;

exports[`RichResolutionContent renders static content with id=android/atfa/ClickableSpanCheck 1`] = `
<span>
  <ul>
    <li>
      Implement the link using
       
      <stubLinkComponent
        href="https://developer.android.com/reference/android/text/style/URLSpan.html"
      >
        URLSpan
      </stubLinkComponent>
       
      or
      <stubLinkComponent
        href="https://developer.android.com/reference/android/text/util/Linkify.html"
      >
        Linkify
      </stubLinkComponent>
      .
    </li>
    <li>
      If you use 
      <Code>
        URLSpan
      </Code>
      , provide a non-null absolute URL (such as
       
      <Code>
        https://example.com/page.html
      </Code>
      ), not a relative URL (such as 
      <Code>
        /page.html
      </Code>
      ).
    </li>
  </ul>
</span>
`;

exports[`RichResolutionContent renders static content with id=android/atfa/DuplicateClickableBoundsCheck 1`] = `
<span>
  When clickable 
  <Code>
    Views
  </Code>
   are nested, implement click handling so that only one
  <Code>
    View
  </Code>
   handles clicks for any single action. 
  <br />
  If a 
  <Code>
    View
  </Code>
   that's clickable by default (such as a
   
  <Code>
    button
  </Code>
  ) is not intended to be clickable, remove its 
  <Code>
    OnClickListener
  </Code>
  , or set
   
  <Code>
    android:clickable="false"
  </Code>
  .
</span>
`;

exports[`RichResolutionContent renders static content with id=android/atfa/DuplicateSpeakableTextCheck 1`] = `
<span>
  If clickable 
  <Code>
    View
  </Code>
   objects perform the 
  <i>
    same
  </i>
   
  function, they can have the same speakable text; no changes are needed.
  <br />
  If two or more clickable 
  <Code>
    View
  </Code>
   objects perform
   
  <i>
    different
  </i>
   functions, give them unique speakable text.
</span>
`;

exports[`RichResolutionContent renders static content with id=android/atfa/ImageContrastCheck 1`] = `
<span>
  Make sure the meaningful elements in a graphic have a contrast ratio â‰¥ 3:1.
</span>
`;

exports[`RichResolutionContent renders static content with id=android/atfa/LinkPurposeUnclearCheck 1`] = `
<span>
  Describe the unique purpose of the link using any of the following:
  <ul>
    <li>
      Good: Programmatically related context, or
    </li>
    <li>
      Better: Accessible name and/or accessible description, or
    </li>
    <li>
      Best: Link text
    </li>
  </ul>
  Programmatically related context includes:
  <ul>
    <li>
      Text in the same sentence, paragraph, list item, or table cell as the link
    </li>
    <li>
      Text in a parent list item
    </li>
    <li>
      Text in a table header cell associated with the cell that contains the link
    </li>
  </ul>
  Writing tips:
  <ul>
    <li>
      If a link's destination is a document or web application, the name of the document or application is sufficient.
    </li>
    <li>
      Links with different destinations should have different descriptions; links with the same destination should have the same description.
    </li>
    <li>
      Programmatically related context is easier to understand when it precedes the link.
    </li>
  </ul>
</span>
`;

exports[`RichResolutionContent renders static content with id=android/atfa/RedundantDescriptionCheck 1`] = `
<span>
  Don't include an element's role (type), state, or available actions in the following attributes: 
  <Code>
    android:contentDescription
  </Code>
  ,
  <Code>
    android:text
  </Code>
  ,
   
  <Code>
    android:hint
  </Code>
  .
</span>
`;

exports[`RichResolutionContent renders static content with id=android/atfa/TextContrastCheck 1`] = `
<div
  className="combinationLists"
>
  <ul
    className="multiLineTextYesBullet"
  >
    <li
      list-style-type="disc"
    >
      If the text is intended to be invisible, it passes.
    </li>
    <li
      list-style-type="disc"
    >
      If the text is intended to be visible, use
       
      <stubLinkComponent
        href="https://go.microsoft.com/fwlink/?linkid=2075365"
      >
        Accessibility Insights for Windows
      </stubLinkComponent>
       
      (or the
       
      <stubLinkComponent
        href="https://developer.paciellogroup.com/resources/contrastanalyser/"
      >
        Colour Contrast Analyser
      </stubLinkComponent>
       
      if you're testing on a Mac) to manually verify that it has sufficient contrast compared to the background. If the background is an image or gradient, test an area where contrast appears to be lowest.
    </li>
  </ul>
</div>
`;

exports[`RichResolutionContent renders static content with id=android/atfa/TraversalOrderCheck 1`] = `
<span>
  Good: If the app's view hierarchy doesn't create a logical traversal order, use 
  <Code>
    android:accessibilityTraversalBefore
  </Code>
   or
  <Code>
    android:accessibilityTraversalAfter
  </Code>
   attributes to create an order that makes sense to TalkBack users. Make sure that the attributes do not create any loops or traps that prevent the user from accessing all interactive elements.
  <br />
  Better: Restructure the view hierarchy to create a logical traversal order that does not require use of
   
  <Code>
    android:accessibilityTraversalBefore
  </Code>
   or
  <Code>
    android:accessibilityTraversalAfter
  </Code>
   attributes.
</span>
`;

exports[`RichResolutionContent renders static content with id=web/aria-input-field-name 1`] = `
<div>
  Inspect the element using the
   
  <stubLinkComponent
    href="https://developers.google.com/web/updates/2018/01/devtools"
  >
    Accessibility pane in the browser Developer Tools
  </stubLinkComponent>
   
  to verify that the field's accessible name is complete without its associated
   
  <b>
    &lt;
    label
    &gt;
  </b>
  .
</div>
`;

exports[`RichResolutionContent renders static content with id=web/color-contrast 1`] = `
<div
  className="combinationLists"
>
  <ul
    className="multiLineTextYesBullet"
  >
    <li
      list-style-type="disc"
    >
      If the instance is an icon or other non-text content, ignore it. This rule applies only to text.
    </li>
    <li
      list-style-type="disc"
    >
      If the instance is text, use
       
      <stubLinkComponent
        href="https://go.microsoft.com/fwlink/?linkid=2075365"
      >
        Accessibility Insights for Windows
      </stubLinkComponent>
       
      (or the
       
      <stubLinkComponent
        href="https://developer.paciellogroup.com/resources/contrastanalyser/"
      >
        Colour Contrast Analyser
      </stubLinkComponent>
       
      if you're testing on a Mac) to manually verify that it has sufficient contrast compared to the background. If the background is an image or gradient, test an area where contrast appears to be lowest.
    </li>
  </ul>
  <ul
    className="multiLineTextNoBullet"
  >
    <li>
      For detailed test instructions, see
       
      <Term>
        Assessment 
        &gt;
         Adaptable content 
        &gt;
         Contrast
      </Term>
      .
    </li>
  </ul>
</div>
`;

exports[`RichResolutionContent renders static content with id=web/link-in-text-block 1`] = `
<ul
  className="multiLineTextNoBullet"
>
  <li>
    Manually verify that the link text EITHER has a contrast ratio of at least 3:1 compared to surrounding text OR has a distinct visual style (such as underlined, bolded, or italicized).
  </li>
  <li>
    To measure contrast, use
     
    <stubLinkComponent
      href="https://go.microsoft.com/fwlink/?linkid=2075365"
    >
      Accessibility Insights for Windows
    </stubLinkComponent>
     
    (or the
     
    <stubLinkComponent
      href="https://developer.paciellogroup.com/resources/contrastanalyser/"
    >
      Colour Contrast Analyser
    </stubLinkComponent>
     
    if you're testing on a Mac).
  </li>
</ul>
`;

exports[`RichResolutionContent renders static content with id=web/th-has-data-cells 1`] = `
<div>
  Examine the header cell in the context of the table to verify that it has no data cells.
</div>
`;
